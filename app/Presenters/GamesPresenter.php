<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Model\GameManager;
use App\Model\UserManager;
use Nette;
use Nette\Application\UI\Form;
use Nette\Database\Context;

final class GamesPresenter extends BasePresenter
{
    /**
     * @var Context
     */
    private $database;

    /**
     * @var GameManager
     */
    private $gameManager;

    /**
     * @var UserManager
     */
    private $userManager;

    /**
     * GamesPresenter constructor.
     * @param Context $database
     * @param GameManager $gameManager
     * @param UserManager $userManager
     */
    public function __construct(Context $database, GameManager $gameManager, UserManager $userManager)
    {
        parent::__construct($database, $userManager);
        $this->database = $database;
        $this->gameManager = $gameManager;
        $this->userManager = $userManager;
    }

    /**
     * @throws \Nette\Application\AbortException
     */
    protected function startup()
    {
        parent::startup();

        if (!$this->user->isLoggedIn()) {
            if ($this->user->logoutReason === Nette\Http\UserStorage::INACTIVITY) {
                $this->flashMessage('You have been signed out due to inactivity. Please sign in again.', 'alert-info');
            }
            $this->redirect('Sign:in', ['backlink' => $this->storeRequest()]);
        }
    }
    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function RenderDefault(): void
    {
        $this->template->games = $this->gameManager->getGames();
    }

    /**
     * @param int $game_id
     */
    public function RenderDetail(int $game_id):void
    {
        $this->template->game = $this->gameManager->getGameById($game_id);
    }

    /**
     * @param int $game_id
     * @throws Nette\Application\BadRequestException
     */
    public function ActionEdit(int $game_id):void
    {
        $game = $this->gameManager->getGameById($game_id);
        $this->template->game = $game;

        if(!$game){
            $this->error('Post not found');
        }
        $this['editGameForm']->setDefaults($game);
    }

    public function ActionDelete(int $game_id):void
    {

    }


    /**
     * @return Form
     */
    protected function createComponentUploadGameForm(): Form
    {
        $form = new Form();

        $form->addUpload('game_image','Game image')
            ->addRule($form::IMAGE, 'Please select file format JPEG, PNG or GIF.')
            ->addRule($form::MAX_FILE_SIZE, 'Maximum size is 1 MB.', 1024 * 1024);

        $form->addUpload('game_icon','Game icon')
            ->addRule($form::IMAGE, 'Please select file format JPEG, PNG or GIF.')
            ->addRule($form::MAX_FILE_SIZE, 'Maximum size is 1 MB.', 1024 * 1024);

        $form->addUpload('game_file', 'Game file')
            ->setRequired();

        $form->addText('game_name', 'Game name')
            ->setRequired();

        $form->addTextArea('game_description', 'Game description');

        $form->addSubmit('uploadGame', 'Upload game');

        $form->onSuccess[] = [$this, 'uploadGameSucceeded'];

        return $form;
    }

    /**
     * @param Form $form
     * @param \stdClass $values
     * @throws Nette\Application\AbortException
     */
    public function uploadGameSucceeded(Form $form, \stdClass $values): void
    {
        if($values->game_image->hasFile()){
            $imagePath = "/blazen_games/" . $values->game_name . "/game_image/" . $values->game_image->getName();
        }
        else{
            $imagePath = '/images/placeholder500x1000px.png';
        }
        if($values->game_icon->hasFile()){
            $iconPath = "/blazen_games/" . $values->game_name . "/game_icon/" . $values->game_icon->getName();
        }
        else{
            $iconPath = '/images/profile-pic-placeholder.png';
        }

        $sourceFilePath = "/blazen_games/" . $values->game_name . "/" . $values->game_file->getName();

        $data = array(
            'game_img_path' => $imagePath,
            'game_file_path' => $sourceFilePath,
            'game_name' => $values->game_name,
            'game_description' => $values->game_description,
            'game_icon_path' => $iconPath
        );

        $this->database->table('blazen_games')->insert($data);

        if($values->game_image->hasFile()){
            $values->game_image->move("../www" . $imagePath);
        }
        if($values->game_icon->hasFile()){
            $values->game_icon->move("../www" . $iconPath);
        }

        $values->game_file->move("../www" . $sourceFilePath);

        $this->flashMessage('Games was successfully uploaded', 'alert-success');

        $this->redirect('Games:');
    }

    /**
     * @return Form
     */
    protected function createComponentEditGameForm(): Form
    {
        $form = new Form();

        $form->addHidden('game_id');

        $form->addUpload('game_image','Game image')
            ->addRule($form::IMAGE, 'Please select file format JPEG, PNG or GIF.')
            ->addRule($form::MAX_FILE_SIZE, 'Maximum size is 1 MB.', 1024 * 1024);

        $form->addUpload('game_icon','Game icon')
            ->addRule($form::IMAGE, 'Please select file format JPEG, PNG or GIF.')
            ->addRule($form::MAX_FILE_SIZE, 'Maximum size is 1 MB.', 1024 * 1024);

        $form->addUpload('game_file', 'Game file');

        $form->addHidden('game_name');

        $form->addTextArea('game_description', 'Game description');

        $form->addSubmit('editGame', 'Edit game');

        $form->onSuccess[] = [$this, 'EditGameSucceeded'];

        return $form;
    }

    /**
     * @param Form $form
     * @param \stdClass $values
     */
    public function editGameSucceeded(Form $form, \stdClass $values): void
    {
        $game = $this->database->table('blazen_games')->get($values->game_id);

        $data = array(
            'game_description' => $values->game_description,
        );

        if($values->game_image->hasFile()){
            $imagePath = "/blazen_games/" . $values->game_name . "/game_image/" . $values->game_image->getName();
            $data['game_img_path'] = $imagePath;
        }

        if($values->game_icon->hasFile()){
            $iconPath = "/blazen_games/" . $values->game_name . "/game_icon/" . $values->game_icon->getName();
            $data['game_icon_path'] = $iconPath;
        }

        if($values->game_file->hasFile()){
            $sourceFilePath = "/blazen_games/" . $values->game_name . "/" . $values->game_file->getName();
            $data['game_file_path'] = $sourceFilePath;
        }

        $game->update($data);

        if($values->game_image->hasFile()){
            $values->game_image->move("../www" . $imagePath);
        }
        if($values->game_icon->hasFile()){
            $values->game_icon->move("../www" . $iconPath);
        }
        if($values->game_file->hasFile()){
            $values->game_file->move("../www" . $sourceFilePath);
        }

        $this->flashMessage('Games was successfully updated', 'alert-success');

        $this->redirect('Games:detail', $values->game_id);
    }
}
