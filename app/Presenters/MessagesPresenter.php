<?php

declare(strict_types=1);

namespace App\Presenters;

use App\Model\GameManager;
use App\Model\MessagesManager;
use App\Model\UserManager;
use Nette;
use Nette\Application\UI\Form;
use Nette\Database\Context;
use Nette\Application\AbortException;
use Nette\Http\UserStorage;
use Nette\Utils\Strings;

final class MessagesPresenter extends BasePresenter
{
    /**
     * @var Context
     */
    private $database;


    /**
     * @var UserManager
     */
    private $userManager;

    /**
     * @var MessagesManager
     */
    private $messagesManager;

    /**
     * MessagesPresenter constructor.
     * @param Context $database
     * @param UserManager $userManager
     * @param MessagesManager $messagesManager
     */
    public function __construct(Context $database, UserManager $userManager, MessagesManager $messagesManager)
    {
        parent::__construct($database, $userManager);
        $this->database = $database;

        $this->userManager = $userManager;
        $this->messagesManager = $messagesManager;
    }

    /**
     * @throws AbortException
     */
    protected function startup()
    {
        parent::startup();

        if (!$this->user->isLoggedIn()) {
            if ($this->user->logoutReason === UserStorage::INACTIVITY) {
                $this->flashMessage('You have been signed out due to inactivity. Please sign in again.', 'alert-info');
            }
            $this->redirect('Sign:in', ['backlink' => $this->storeRequest()]);
        }
    }
    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

    }

    /**
     * @param $inbox_hash
     * @return bool
     */
    public function isActive($inbox_hash): bool
    {
        return Strings::contains($this->getHttpRequest()->getUrl()->getAbsoluteUrl(), $inbox_hash);
    }

    /**
     * @param string|null $inbox_hash
     */
    public function renderDefault(string $inbox_hash = null)
    {
        $inboxes = $this->messagesManager->getInboxes($this->getUser()->getId());
        bdump($inboxes,'inboxes');
        $this->template->inboxes = $inboxes;
        $this->template->messages = null;
        if($inbox_hash){
            $messages = $this->messagesManager->getMessagesByInboxHash($inbox_hash);
            bdump($messages,'messages');
            $this->template->messages = $messages;
        }

    }

    public function handleRefreshMessages(){
        if($this->isAjax()){
            $this->redrawControl('messages');
        }
    }

    public function handleRefreshInboxes(){
        if ($this->isAjax()){
            $this->redrawControl('messagesbox');
            $this->redrawControl('inboxes');
            $this->redrawControl('messages');
        }
    }

    public function handleRefreshMessagesbox()
    {
        if ($this->isAjax()){
            $this->redrawControl('messagesbox');
        }
    }

    /**
     * @param int $to_user_id
     * @throws AbortException
     */
    public function ActionCheckInbox(int $to_user_id)
    {
        $hash = $this->messagesManager->CreateOwnerInbox($this->getUser()->getId(), $to_user_id);

        $this->redirect('Messages:default', $hash);
    }


    /**
     * @return Form
     */
    public function createComponentSentMessage(): Form
    {
        $form = new Form;

        $form->addHidden('inbox_hash', $this->getParameter('inbox_hash'));
        $form->addHidden('sender_id', $this->getUser()->getId());

        $form->addHidden('to_user_id', '');

        $form->addTextArea('message', 'Message...')
            ->setRequired();

        $form->addSubmit('sentMessage', 'Sent Message');

        $form->onSuccess[] = [$this, 'sentMessageFormSucceeded'];

        return $form;
    }

    /**
     * @param Form $form
     * @param array $values
     * @throws AbortException
     */
    public function sentMessageFormSucceeded(Form $form, array $values):void
    {
        $data = [
          'inbox_hash' => $values['inbox_hash'],
          'sender_id' => $values['sender_id'],
          'message' => $values['message'],
        ];
        $this->database->table('messages')->insert($data);

        $dataToInbox = [
            'last_message' => $values['message']
        ];

        $this->messagesManager->updateInbox((int)$values['to_user_id'],(int)$values['sender_id'], $dataToInbox);
        $this->redirect('Messages:', $values['inbox_hash']);
    }










}
